// ported from Angus Griffith's Mathics parser

#include "tokeniser.h"
#include <map>
#include <vector>
#include <regex>

using std::map;
using std::string;
using std::vector;
using std::regex;

// http://stackoverflow.com/questions/11254232/do-c11-regular-expressions-work-with-utf-8-strings

// generated using:
// for k in sorted(literal_tokens.keys()):
//   print("{%s[0], {%s}}," % (json.dumps(k), ', '.join(map(lambda s: '"%s"' %s, literal_tokens[k]))))

const map<char, vector<const char*>> literal_tokens = {
    {"!"[0], {"Unequal", "Factorial2", "Factorial"}},
    {"\""[0], {"String"}},
    {"#"[0], {"SlotSequence", "Slot"}},
    {"%"[0], {"Out"}},
    {"&"[0], {"And", "Function"}},
    {"'"[0], {"Derivative"}},
    {"("[0], {"RawLeftParenthesis"}},
    {")"[0], {"RawRightParenthesis"}},
    {"*"[0], {"NonCommutativeMultiply", "TimesBy", "Times"}},
    {"+"[0], {"Increment", "AddTo", "Plus"}},
    {","[0], {"RawComma"}},
    {"-"[0], {"Decrement", "SubtractFrom", "Rule", "Minus"}},
    {"."[0], {"Number", "RepeatedNull", "Repeated", "Dot"}},
    {"/"[0], {"MapAll", "Map", "DivideBy", "ReplaceRepeated", "ReplaceAll", "Postfix", "TagSet", "Condition", "Divide"}},
    {"0"[0], {"Number"}},
    {"1"[0], {"Number"}},
    {"2"[0], {"Number"}},
    {"3"[0], {"Number"}},
    {"4"[0], {"Number"}},
    {"5"[0], {"Number"}},
    {"6"[0], {"Number"}},
    {"7"[0], {"Number"}},
    {"8"[0], {"Number"}},
    {"9"[0], {"Number"}},
    {":"[0], {"MessageName", "RuleDelayed", "SetDelayed", "RawColon"}},
    {";"[0], {"Span", "Semicolon"}},
    {"<"[0], {"UndirectedEdge", "Get", "StringJoin", "LessEqual", "Less"}},
    {"="[0], {"SameQ", "UnsameQ", "Equal", "Unset", "Set"}},
    {">"[0], {"PutAppend", "Put", "GreaterEqual", "Greater"}},
    {"?"[0], {"PatternTest"}},
    {"@"[0], {"ApplyList", "Apply", "Composition", "Prefix"}},
    {"A"[0], {"Pattern", "Symbol"}},
    {"B"[0], {"Pattern", "Symbol"}},
    {"C"[0], {"Pattern", "Symbol"}},
    {"D"[0], {"Pattern", "Symbol"}},
    {"E"[0], {"Pattern", "Symbol"}},
    {"F"[0], {"Pattern", "Symbol"}},
    {"G"[0], {"Pattern", "Symbol"}},
    {"H"[0], {"Pattern", "Symbol"}},
    {"I"[0], {"Pattern", "Symbol"}},
    {"J"[0], {"Pattern", "Symbol"}},
    {"K"[0], {"Pattern", "Symbol"}},
    {"L"[0], {"Pattern", "Symbol"}},
    {"M"[0], {"Pattern", "Symbol"}},
    {"N"[0], {"Pattern", "Symbol"}},
    {"O"[0], {"Pattern", "Symbol"}},
    {"P"[0], {"Pattern", "Symbol"}},
    {"Q"[0], {"Pattern", "Symbol"}},
    {"R"[0], {"Pattern", "Symbol"}},
    {"S"[0], {"Pattern", "Symbol"}},
    {"T"[0], {"Pattern", "Symbol"}},
    {"U"[0], {"Pattern", "Symbol"}},
    {"V"[0], {"Pattern", "Symbol"}},
    {"W"[0], {"Pattern", "Symbol"}},
    {"X"[0], {"Pattern", "Symbol"}},
    {"Y"[0], {"Pattern", "Symbol"}},
    {"Z"[0], {"Pattern", "Symbol"}},
    {"["[0], {"RawLeftBracket"}},
    {"\\"[0], {"LeftRowBox", "RightRowBox", "InterpretedBox", "SuperscriptBox", "SubscriptBox", "OverscriptBox", "UnderscriptBox", "OtherscriptBox", "FractionBox", "SqrtBox", "FormBox", "RawBackslash"}},
    {"]"[0], {"RawRightBracket"}},
    {"^"[0], {"UpSetDelayed", "UpSet", "Power"}},
    {"_"[0], {"Pattern"}},
    {"`"[0], {"Pattern", "Symbol"}},
    {"a"[0], {"Pattern", "Symbol"}},
    {"b"[0], {"Pattern", "Symbol"}},
    {"c"[0], {"Pattern", "Symbol"}},
    {"d"[0], {"Pattern", "Symbol"}},
    {"e"[0], {"Pattern", "Symbol"}},
    {"f"[0], {"Pattern", "Symbol"}},
    {"g"[0], {"Pattern", "Symbol"}},
    {"h"[0], {"Pattern", "Symbol"}},
    {"i"[0], {"Pattern", "Symbol"}},
    {"j"[0], {"Pattern", "Symbol"}},
    {"k"[0], {"Pattern", "Symbol"}},
    {"l"[0], {"Pattern", "Symbol"}},
    {"m"[0], {"Pattern", "Symbol"}},
    {"n"[0], {"Pattern", "Symbol"}},
    {"o"[0], {"Pattern", "Symbol"}},
    {"p"[0], {"Pattern", "Symbol"}},
    {"q"[0], {"Pattern", "Symbol"}},
    {"r"[0], {"Pattern", "Symbol"}},
    {"s"[0], {"Pattern", "Symbol"}},
    {"t"[0], {"Pattern", "Symbol"}},
    {"u"[0], {"Pattern", "Symbol"}},
    {"v"[0], {"Pattern", "Symbol"}},
    {"w"[0], {"Pattern", "Symbol"}},
    {"x"[0], {"Pattern", "Symbol"}},
    {"y"[0], {"Pattern", "Symbol"}},
    {"z"[0], {"Pattern", "Symbol"}},
    {"{"[0], {"RawLeftBrace"}},
    {"|"[0], {"Or", "Alternatives"}},
    {"}"[0], {"RawRightBrace"}},
    {"~"[0], {"StringExpression", "Infix"}}
};

// for k in sorted(token_indices.keys()):
//   print("{%s[0], {%s}}," % (json.dumps(k), ', '.join(map(lambda s: str(s), token_indices[k]))))

const map<char, vector<int>> token_indices = {
    {"!"[0], {52, 84, 85}},
    {"\""[0], {1}},
    {"#"[0], {4, 5}},
    {"%"[0], {6}},
    {"&"[0], {60, 86}},
    {"'"[0], {41}},
    {"("[0], {14}},
    {")"[0], {15}},
    {"*"[0], {43, 46, 48}},
    {"+"[0], {31, 44, 82}},
    {","[0], {16}},
    {"-"[0], {32, 45, 64, 81}},
    {"."[0], {0, 61, 62, 80}},
    {"/"[0], {33, 34, 47, 67, 68, 69, 73, 76, 78}},
    {"0"[0], {0}},
    {"1"[0], {0}},
    {"2"[0], {0}},
    {"3"[0], {0}},
    {"4"[0], {0}},
    {"5"[0], {0}},
    {"6"[0], {0}},
    {"7"[0], {0}},
    {"8"[0], {0}},
    {"9"[0], {0}},
    {":"[0], {18, 65, 71, 87}},
    {";"[0], {17, 77}},
    {"<"[0], {66, 9, 42, 53, 58}},
    {"="[0], {49, 50, 51, 74, 75}},
    {">"[0], {7, 8, 55, 57}},
    {"?"[0], {30}},
    {"@"[0], {35, 36, 37, 38}},
    {"A"[0], {2, 3}},
    {"B"[0], {2, 3}},
    {"C"[0], {2, 3}},
    {"D"[0], {2, 3}},
    {"E"[0], {2, 3}},
    {"F"[0], {2, 3}},
    {"G"[0], {2, 3}},
    {"H"[0], {2, 3}},
    {"I"[0], {2, 3}},
    {"J"[0], {2, 3}},
    {"K"[0], {2, 3}},
    {"L"[0], {2, 3}},
    {"M"[0], {2, 3}},
    {"N"[0], {2, 3}},
    {"O"[0], {2, 3}},
    {"P"[0], {2, 3}},
    {"Q"[0], {2, 3}},
    {"R"[0], {2, 3}},
    {"S"[0], {2, 3}},
    {"T"[0], {2, 3}},
    {"U"[0], {2, 3}},
    {"V"[0], {2, 3}},
    {"W"[0], {2, 3}},
    {"X"[0], {2, 3}},
    {"Y"[0], {2, 3}},
    {"Z"[0], {2, 3}},
    {"["[0], {10}},
    {"\\"[0], {19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 83}},
    {"]"[0], {11}},
    {"^"[0], {70, 72, 79}},
    {"_"[0], {2}},
    {"`"[0], {2, 3}},
    {"a"[0], {2, 3}},
    {"b"[0], {2, 3}},
    {"c"[0], {2, 3}},
    {"d"[0], {2, 3}},
    {"e"[0], {2, 3}},
    {"f"[0], {2, 3}},
    {"g"[0], {2, 3}},
    {"h"[0], {2, 3}},
    {"i"[0], {2, 3}},
    {"j"[0], {2, 3}},
    {"k"[0], {2, 3}},
    {"l"[0], {2, 3}},
    {"m"[0], {2, 3}},
    {"n"[0], {2, 3}},
    {"o"[0], {2, 3}},
    {"p"[0], {2, 3}},
    {"q"[0], {2, 3}},
    {"r"[0], {2, 3}},
    {"s"[0], {2, 3}},
    {"t"[0], {2, 3}},
    {"u"[0], {2, 3}},
    {"v"[0], {2, 3}},
    {"w"[0], {2, 3}},
    {"x"[0], {2, 3}},
    {"y"[0], {2, 3}},
    {"z"[0], {2, 3}},
    {"{"[0], {12}},
    {"|"[0], {59, 63}},
    {"}"[0], {13}},
    {"~"[0], {39, 40}}
};

auto x = vector<string>();